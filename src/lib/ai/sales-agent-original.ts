import { callOpenAI } from './openai-proxy';
import OpenAI from 'openai';
import { PrismaClient } from '@prisma/client';
import * as dotenv from 'dotenv';
import path from 'path';
import { HttpsProxyAgent } from 'https-proxy-agent';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });
dotenv.config({ path: path.resolve(process.cwd(), '.env') });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
const httpAgent = process.env.HTTPS_PROXY
  ? new HttpsProxyAgent(process.env.HTTPS_PROXY)
  : undefined;

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  httpAgent: httpAgent as any,
});

const prisma = new PrismaClient();

export interface CustomerContext {
  telegramId: string;
  username?: string;
  firstName?: string;
  classification?: string;
  stage?: string;
  conversation?: any;
}

const MANAGER_TRIGGERS = [
  '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
  '–ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è',
  '–Ω–µ –º–æ–≥—É –∑–∞–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç',
  '–ø—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞',
  '—Ä–∞—Å—Å—Ä–æ—á–∫–∞ –æ—Ç –Ω–∞—Å',
  '–æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞–∫ –∏–ø'
];

const SYSTEM_PROMPT = `
–í—ã - AI-–ø—Ä–æ–¥–∞–∂–Ω–∏–∫ —à–∫–æ–ª—ã –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ SOINTERA. –í—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –æ—Ç –ª–∏—Ü–∞ —à–∫–æ–ª—ã, –ø–æ–º–æ–≥–∞–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å—ã –∏ –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.

–í–ê–ñ–ù–û: –í—ã –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç–µ –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.

üìã –ü–†–ò–ù–¶–ò–ü–´ –û–ë–©–ï–ù–ò–Ø:
1. –õ—ë–≥–∫–∏–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å. –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ "–≤—ã"
2. –ó–∞–¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã: "–ê –≤—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –ø–æ—Ö–æ–∂–∏–µ –∫—É—Ä—Å—ã?", "–ê –≤ –∫–∞–∫–æ–π –≤—ã —Å–µ–π—á–∞—Å —Ç–æ—á–∫–µ?"
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—Ä–∞–∑—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: "–û—á–µ–Ω—å –ø–æ–Ω—è—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å", "–í—ã —Ç–æ—á–Ω–æ –Ω–µ –æ–¥–Ω–∞ —Å —Ç–∞–∫–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"
4. –ê—Ä–≥—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–æ–ª—å–∑—É: "–≠—Ç–æ—Ç –∫—É—Ä—Å —Ö–æ—Ä–æ—à–æ –∑–∞—Ö–æ–¥–∏—Ç —Ç–µ–º, –∫—Ç–æ..."
5. –ê–∫–∫—É—Ä–∞—Ç–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∫ –ø—Ä–æ–¥–∞–∂–µ: "–ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –≤–∞—à —Ñ–æ—Ä–º–∞—Ç ‚Äî –º–æ–∂–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ —Å–µ–π—á–∞—Å"

‚ùå –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï:
- –ù–∞–≤—è–∑—á–∏–≤—ã–µ —Ñ—Ä–∞–∑—ã: "–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è —Å–∫–∏–¥–∫–∞!", "–í—ã —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å!"
- –ü–∞—Å—Å–∏–≤–Ω—É—é –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: "–ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç..."
- –°—É—Ö—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

üéØ –¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø:
- –ñ–µ–Ω—â–∏–Ω—ã 30-45 –ª–µ—Ç
- –í –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –æ—Ç 5 –¥–æ 20 –ª–µ—Ç
- –•–æ—Ç—è—Ç —Å–∏—Å—Ç–µ–º—ã, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —Ä–æ—Å—Ç–∞ –¥–æ—Ö–æ–¥–∞
- –ë–æ—è—Ç—Å—è –ø–æ–¥–Ω–∏–º–∞—Ç—å —Ü–µ–Ω—ã, –æ–Ω–ª–∞–π–Ω-–æ–±—É—á–µ–Ω–∏—è, —á—Ç–æ "—É–∂–µ –ø–æ–∑–¥–Ω–æ"

üè° –û –¢–í–û–†–ß–ï–°–ö–û–ô –î–ï–†–ï–í–ù–ï:
–û—á–Ω—ã–µ –∫—É—Ä—Å—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –∑–∞–≥–æ—Ä–æ–¥–Ω–æ–π –∞–∫–∞–¥–µ–º–∏–∏ SOINTERA - –ø–µ—Ä–≤–æ–π –≤ –†–æ—Å—Å–∏–∏ –¥–ª—è –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä–æ–≤. –≠—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ—Ç—Ä–∏—Ç —Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ–º –≤ –∫—É–ø–æ–ª—å–Ω—ã—Ö –¥–æ–º–∏–∫–∞—Ö, –ø–∏—Ç–∞–Ω–∏–µ–º –æ—Ç –ø–æ–≤–∞—Ä–∞, —É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –±–µ—Å–µ–¥–∞–º–∏ —Å –ï–ª–µ–Ω–æ–π. –§–æ—Ä–º–∞—Ç "–≤—Å—ë –≤–∫–ª—é—á–µ–Ω–æ" - –≤—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–µ–∑–∂–∞–µ—Ç–µ –∏ –ø–æ–≥—Ä—É–∂–∞–µ—Ç–µ—Å—å –≤ –æ–±—É—á–µ–Ω–∏–µ.

üì± –ö–û–ì–î–ê –ó–í–ê–¢–¨ –ú–ï–ù–ï–î–ñ–ï–†–ê:
–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ: –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è, –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∫—É—Ä—Å–∞, —Ä–∞—Å—Å—Ä–æ—á–∫—É –æ—Ç —à–∫–æ–ª—ã, –æ–ø–ª–∞—Ç—É –∫–∞–∫ –ò–ü - —Å–∫–∞–∂–∏—Ç–µ: "–ü–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤–∞—Å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä @natalylini, —è –ø–µ—Ä–µ–¥–∞–º –µ–π –≤–∞—à –∑–∞–ø—Ä–æ—Å."

–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:
- –ö–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫—É—Ä—Å: "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –≤—ã —Å–µ–π—á–∞—Å –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –∏–ª–∏ –¥–∞–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏? –•–æ—á—É –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø–æ–¥–æ–π–¥–µ—Ç."
- –ö–ª–∏–µ–Ω—Ç —Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è: "–û—á–µ–Ω—å –ø–æ–Ω–∏–º–∞—é ‚Äî —Å–∞–º–∞ –¥–æ–ª–≥–æ –æ—Ç—Ç—è–≥–∏–≤–∞–ª–∞ –ø–æ—Ö–æ–∂–µ–µ –æ–±—É—á–µ–Ω–∏–µ. –ê —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–º—É—â–∞–µ—Ç? –í–æ–∑–º–æ–∂–Ω–æ, —Å–º–æ–≥—É –ø—Ä–æ—è—Å–Ω–∏—Ç—å."
- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∏ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å. –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ üíõ"
`;

export class SalesAgent {
  async classifyCustomer(message: string, context: CustomerContext): Promise<string> {
    const keywords = {
      beginner: ['–Ω–∞—á–∏–Ω–∞—é—â–∏–π', '–Ω–æ–≤–∏—á–æ–∫', '—Å –Ω—É–ª—è', '—Ö–æ—á—É –Ω–∞—É—á–∏—Ç—å—Å—è', '–Ω–µ—Ç –æ–ø—ã—Ç–∞'],
      experienced: ['–æ–ø—ã—Ç', '—Ä–∞–±–æ—Ç–∞—é', '–ª–µ—Ç –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏', '–º–∞—Å—Ç–µ—Ä', '—Å–∞–ª–æ–Ω'],
      interested: ['–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ', '—á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å', '–∫–∞–∫–∏–µ –∫—É—Ä—Å—ã'],
      ready: ['—Ö–æ—á—É –∫—É–ø–∏—Ç—å', '–≥–æ—Ç–æ–≤ –æ–ø–ª–∞—Ç–∏—Ç—å', '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å']
    };

    for (const [classification, words] of Object.entries(keywords)) {
      if (words.some(word => message.toLowerCase().includes(word))) {
        return classification;
      }
    }

    return 'interested';
  }

  async shouldCallManager(message: string): Promise<boolean> {
    const lowerMessage = message.toLowerCase();
    return MANAGER_TRIGGERS.some(trigger => lowerMessage.includes(trigger));
  }

  async processMessage(message: string, context: CustomerContext): Promise<{
    response: string;
    callManager: boolean;
    classification?: string;
  }> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä
    const callManager = await this.shouldCallManager(message);
    if (callManager) {
      return {
        response: `–ü–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤–∞—Å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä @${process.env.MANAGER_USERNAME}, —è –ø–µ—Ä–µ–¥–∞–º –µ–π –≤–∞—à –∑–∞–ø—Ä–æ—Å. –û–Ω–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`,
        callManager: true
      };
    }

    // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    const classification = await this.classifyCustomer(message, context);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—É—Ä—Å—ã
    const courses = await this.findRelevantCourses(message);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é AI
    const response = await this.generateResponse(message, courses, context);

    return {
      response,
      callManager: false,
      classification
    };
  }

  async findRelevantCourses(message: string) {
    const keywords = {
      haircut: ['—Å—Ç—Ä–∏–∂–∫', '–∫–æ—Ä–æ—Ç–∫–∏–µ', '—Ñ–æ—Ä–º'],
      color: ['—Ü–≤–µ—Ç', '–∫–æ–ª–æ—Ä–∏—Å—Ç', '–±–ª–æ–Ω–¥', '–¥–Ω–∫ —Ü–≤–µ—Ç–∞', '–æ–∫—Ä–∞—à–∏–≤–∞–Ω'],
      management: ['—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª', '—Å–∞–ª–æ–Ω', '–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω', '—É–ø—Ä–∞–≤–ª–µ–Ω'],
      education: ['–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç', '—Ç—Ä–µ–Ω–µ—Ä', '–æ–±—É—á'],
      online: ['–æ–Ω–ª–∞–π–Ω', '–¥–∏—Å—Ç–∞–Ω—Ü'],
      offline: ['–æ—á–Ω–æ', '–æ—Ñ–ª–∞–π–Ω', '–¥–µ—Ä–µ–≤–Ω']
    };

    const categories: string[] = [];
    const formats: string[] = [];

    for (const [category, words] of Object.entries(keywords)) {
      if (words.some(word => message.toLowerCase().includes(word))) {
        if (category === 'online' || category === 'offline') {
          formats.push(category);
        } else {
          categories.push(category);
        }
      }
    }

    const where: any = {};
    if (categories.length > 0) {
      where.category = { in: categories };
    }
    if (formats.length > 0) {
      where.format = { in: formats };
    }

    const courses = await prisma.course.findMany({
      where: Object.keys(where).length > 0 ? where : undefined,
      take: 5
    });

    return courses;
  }

  async generateResponse(
    message: string,
    courses: any[],
    context: CustomerContext
  ): Promise<string> {
    const coursesInfo = courses.map(c =>
      `- ${c.name} (${c.format === 'online' ? '–æ–Ω–ª–∞–π–Ω' : '–æ—Ñ–ª–∞–π–Ω'}): ${c.price} —Ä—É–±. ${c.description || ''}`
    ).join('\n');

    const messages = [
      { role: 'system' as const, content: SYSTEM_PROMPT },
      {
        role: 'system' as const,
        content: `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n${coursesInfo || '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∫–æ–ª–µ'}`
      },
      {
        role: 'user' as const,
        content: message
      }
    ];

    try {
      const response = await callOpenAI(messages, process.env.OPENAI_API_KEY!);
      return response || "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.";

      return completion.choices[0].message.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.';
    } catch (error) {
      console.error('Error generating response:', error);
      return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä @natalylini —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.';
    }
  }

  async saveConversation(
    customerId: string,
    userMessage: string,
    assistantMessage: string,
    conversationId?: string
  ) {
    if (!conversationId) {
      const conversation = await prisma.conversation.create({
        data: {
          customerId,
          messages: {
            create: [
              { role: 'user', content: userMessage },
              { role: 'assistant', content: assistantMessage }
            ]
          }
        }
      });
      return conversation.id;
    } else {
      await prisma.message.createMany({
        data: [
          { conversationId, role: 'user', content: userMessage },
          { conversationId, role: 'assistant', content: assistantMessage }
        ]
      });
      return conversationId;
    }
  }
}
