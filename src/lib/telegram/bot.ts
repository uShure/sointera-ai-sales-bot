import { TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions';
import { NewMessage } from 'telegram/events';
import { Api } from 'telegram/tl';
import { PrismaClient } from '@prisma/client';
import { SalesAgent } from '../ai/sales-agent';
import readline from 'readline/promises';

const prisma = new PrismaClient();

export class TelegramBot {
  private client: TelegramClient;
  private salesAgent: SalesAgent;
  private activeConversations: Map<string, string> = new Map();

  constructor() {
    const apiId = parseInt(process.env.TELEGRAM_API_ID!);
    const apiHash = process.env.TELEGRAM_API_HASH!;
    const stringSession = new StringSession(process.env.TELEGRAM_SESSION_STRING || '');

    this.client = new TelegramClient(stringSession, apiId, apiHash, {
      connectionRetries: 5,
    });

    this.salesAgent = new SalesAgent();
  }

  async start() {
    console.log('–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
    await this.client.start({
      phoneNumber: async () => {
        const rl = readline.createInterface({
          input: process.stdin,
          output: process.stdout,
        });
        const phone = await rl.question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ');
        rl.close();
        return phone;
      },
      password: async () => {
        const rl = readline.createInterface({
          input: process.stdin,
          output: process.stdout,
        });
        const password = await rl.question('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å): ');
        rl.close();
        return password;
      },
      phoneCode: async () => {
        const rl = readline.createInterface({
          input: process.stdin,
          output: process.stdout,
        });
        const code = await rl.question('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ');
        rl.close();
        return code;
      },
      onError: (err) => console.log(err),
    });

    console.log('–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const sessionString = this.client.session.save() as string;
    console.log('–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –≤ .env.local:');
    console.log(`TELEGRAM_SESSION_STRING=${sessionString}`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.client.addEventHandler(this.handleMessage.bind(this), new NewMessage({}));
  }

  private async handleMessage(event: any) {
    const message = event.message;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤
    if (!message.isPrivate || message.fromId?.userId === undefined) {
      return;
    }

    const userId = message.fromId.userId.toString();
    const text = message.text;

    if (!text) return;

    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId}: ${text}`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
      const customer = await this.getOrCreateCustomer(userId, message);

      // –ü–æ–ª—É—á–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–π –±–µ—Å–µ–¥—ã
      const conversationId = this.activeConversations.get(userId);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI –∞–≥–µ–Ω—Ç–∞
      const result = await this.salesAgent.processMessage(text, {
        telegramId: userId,
        username: customer.username || undefined,
        firstName: customer.firstName || undefined,
        classification: customer.classification || undefined,
        stage: customer.stage || undefined,
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ—Å–µ–¥—É
      const newConversationId = await this.salesAgent.saveConversation(
        customer.id,
        text,
        result.response,
        conversationId
      );

      this.activeConversations.set(userId, newConversationId);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
      if (result.classification) {
        await prisma.customer.update({
          where: { id: customer.id },
          data: {
            classification: result.classification,
            lastInteraction: new Date()
          }
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      await message.reply({ message: result.response });

      // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
      if (result.callManager) {
        await this.createManagerRequest(customer.id, text);
        await this.notifyManager(customer, text);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      await message.reply({
        message: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.'
      });
    }
  }

  private async getOrCreateCustomer(telegramId: string, message: any) {
    let customer = await prisma.customer.findUnique({
      where: { telegramId }
    });

    if (!customer) {
      const sender = await message.getSender();
      customer = await prisma.customer.create({
        data: {
          telegramId,
          username: sender.username || null,
          firstName: sender.firstName || null,
          lastName: sender.lastName || null,
          phoneNumber: sender.phone || null,
        }
      });
    }

    return customer;
  }

  private async createManagerRequest(customerId: string, reason: string) {
    await prisma.managerRequest.create({
      data: {
        customerId,
        reason
      }
    });
  }

  private async notifyManager(customer: any, message: string) {
    const managerUsername = process.env.MANAGER_USERNAME;
    if (!managerUsername) return;

    try {
      const managerEntity = await this.client.getEntity(managerUsername);
      await this.client.sendMessage(managerEntity, {
        message: `üîî –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞!\n\n–ö–ª–∏–µ–Ω—Ç: ${customer.firstName || customer.username || customer.telegramId}\n–ó–∞–ø—Ä–æ—Å: ${message}`
      });
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É:', error);
    }
  }

  async stop() {
    await this.client.disconnect();
  }
}
