import { TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions';
import { NewMessage } from 'telegram/events';
import { PrismaClient } from '@prisma/client';
import { SalesAgent } from './lib/ai/sales-agent';
import readline from 'readline/promises';
import * as dotenv from 'dotenv';
import path from 'path';
import fs from 'fs';
import { createWriteStream } from 'fs';
import { format } from 'util';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

const prisma = new PrismaClient();

// –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const logsDir = path.join(process.cwd(), 'logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir);
}

// –°–æ–∑–¥–∞—ë–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
const logFile = createWriteStream(path.join(logsDir, `app-${new Date().toISOString().split('T')[0]}.log`), { flags: 'a' });
const errorFile = createWriteStream(path.join(logsDir, `error-${new Date().toISOString().split('T')[0]}.log`), { flags: 'a' });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const log = (level: 'INFO' | 'ERROR' | 'DEBUG', message: string, ...args: any[]) => {
  const timestamp = new Date().toISOString();
  const formattedMessage = format(`[${timestamp}] [${level}] ${message}`, ...args);

  // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
  if (level === 'ERROR') {
    console.error(formattedMessage);
  } else {
    console.log(formattedMessage);
  }

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
  if (level === 'ERROR') {
    errorFile.write(formattedMessage + '\n');
  }
  logFile.write(formattedMessage + '\n');
};

class TelegramUserbot {
  private client: TelegramClient;
  private salesAgent: SalesAgent;
  private activeConversations: Map<string, string> = new Map();
  private isRunning: boolean = false;
  private messagesProcessed: number = 0;
  private sessionStartTime: Date = new Date();

  constructor() {
    const apiId = parseInt(process.env.TELEGRAM_API_ID!);
    const apiHash = process.env.TELEGRAM_API_HASH!;
    const stringSession = new StringSession(process.env.TELEGRAM_SESSION_STRING || '');

    this.client = new TelegramClient(stringSession, apiId, apiHash, {
      connectionRetries: 5,
    });

    this.salesAgent = new SalesAgent();
  }

  async start() {
    log('INFO', 'üöÄ –ó–∞–ø—É—Å–∫ SOINTERA AI –ü—Ä–æ–¥–∞–∂–Ω–∏–∫–∞...');
    log('INFO', 'üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–∏—á–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Telegram...');

    const isHeadless = process.env.HEADLESS === 'true';

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
    if (isHeadless && process.env.TELEGRAM_SESSION_STRING) {
      // –î–ª—è —Å–µ—Ä–≤–µ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
      await this.client.connect();
      log('INFO', '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é');
    } else {
      // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
      await this.client.start({
        phoneNumber: async () => {
          const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
          });
          const phone = await rl.question('üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +7...): ');
          rl.close();
          return phone;
        },
        password: async () => {
          const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
          });
          const password = await rl.question('üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –Ω–∞–∂–º–∏—Ç–µ Enter): ');
          rl.close();
          return password;
        },
        phoneCode: async () => {
          const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
          });
          const code = await rl.question('üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ');
          rl.close();
          return code;
        },
        onError: (err) => log('ERROR', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err),
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const sessionString = (this.client.session as StringSession).save();
      if (sessionString && !process.env.TELEGRAM_SESSION_STRING) {
        log('INFO', 'üìå –í–ê–ñ–ù–û! –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –≤ —Ñ–∞–π–ª .env.local');
        console.log('----------------------------------------');
        console.log(`TELEGRAM_SESSION_STRING=${sessionString}`);
        console.log('----------------------------------------');

        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        fs.writeFileSync('session.txt', `TELEGRAM_SESSION_STRING=${sessionString}`);
        log('INFO', '–°–µ—Å—Å–∏—è —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª session.txt');
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const me = await this.client.getMe();
    log('INFO', `üë§ –í–æ—à–ª–∏ –∫–∞–∫: ${me.firstName} ${me.lastName || ''} (@${me.username || '–±–µ–∑ username'})`);
    log('INFO', `üìä ID –∞–∫–∫–∞—É–Ω—Ç–∞: ${me.id}`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.client.addEventHandler(this.handleMessage.bind(this), new NewMessage({}));

    this.isRunning = true;
    this.sessionStartTime = new Date();

    log('INFO', 'ü§ñ AI –ü—Ä–æ–¥–∞–∂–Ω–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è!');
    log('INFO', 'üì® –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.startStatsReporting();
  }

  private async handleMessage(event: any) {
    const message = event.message;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –æ—Ç –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤)
    if (!message.isPrivate || !message.fromId) {
      return;
    }

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ)
    if (message.out) {
      return;
    }

    const userId = message.fromId.userId?.toString();
    if (!userId) return;

    const text = message.text;
    if (!text) return;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    const sender = await message.getSender();
    const senderName = sender.firstName || sender.username || '–ö–ª–∏–µ–Ω—Ç';

    log('INFO', `üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${senderName} (@${sender.username || '–±–µ–∑ username'}): "${text}"`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ
      const customer = await this.getOrCreateCustomer(userId, sender);

      // –ü–æ–ª—É—á–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–π –±–µ—Å–µ–¥—ã
      const conversationId = this.activeConversations.get(userId);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI –∞–≥–µ–Ω—Ç–∞
      log('DEBUG', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI...');
      const result = await this.salesAgent.processMessage(text, {
        telegramId: userId,
        username: customer.username || undefined,
        firstName: customer.firstName || undefined,
        classification: customer.classification || undefined,
        stage: customer.stage || undefined,
        conversationId: conversationId,
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ—Å–µ–¥—É
      const newConversationId = await this.salesAgent.saveConversation(
        customer.id,
        text,
        result.response,
        conversationId
      );

      this.activeConversations.set(userId, newConversationId);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
      if (result.classification) {
        await prisma.customer.update({
          where: { id: customer.id },
          data: {
            classification: result.classification,
            stage: result.classification === 'ready_to_buy' ? 'ready_to_buy' : customer.stage,
            lastInteraction: new Date()
          }
        });
        log('INFO', `üìä –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${this.getClassificationLabel(result.classification)}`);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      log('INFO', `ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç: "${result.response.substring(0, 100)}${result.response.length > 100 ? '...' : ''}"`);

      await message.reply({ message: result.response });
      this.messagesProcessed++;
      log('INFO', `‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${this.messagesProcessed}`);

      // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä, —É–≤–µ–¥–æ–º–ª—è–µ–º
      if (result.callManager && result.managerInfo) {
        log('INFO', `‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞! –ü–µ—Ä–µ–¥–∞—é @${process.env.MANAGER_USERNAME}`);
        await this.createManagerRequest(customer.id, text);
        await this.notifyManagerWithDetails(customer, result.managerInfo);
      }

    } catch (error) {
      log('ERROR', '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      await message.reply({
        message: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä @natalylini —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
      });
    }
  }

  private getClassificationLabel(classification: string): string {
    const labels: Record<string, string> = {
      beginner: 'üÜï –ù–æ–≤–∏—á–æ–∫',
      experienced: 'üíº –û–ø—ã—Ç–Ω—ã–π',
      interested: 'ü§î –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è',
      ready_to_buy: 'üí≥ –ì–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å'
    };
    return labels[classification] || classification;
  }

  private async getOrCreateCustomer(telegramId: string, sender: any) {
    let customer = await prisma.customer.findUnique({
      where: { telegramId }
    });

    if (!customer) {
      log('INFO', `üìù –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç! –î–æ–±–∞–≤–ª—è—é –≤ –±–∞–∑—É...`);
      customer = await prisma.customer.create({
        data: {
          telegramId,
          username: sender.username || null,
          firstName: sender.firstName || null,
          lastName: sender.lastName || null,
          phoneNumber: sender.phone || null,
        }
      });
    }

    return customer;
  }

  private async createManagerRequest(customerId: string, reason: string) {
    await prisma.managerRequest.create({
      data: {
        customerId,
        reason
      }
    });
  }

  private async notifyManager(customer: any, message: string) {
    const managerUsername = process.env.MANAGER_USERNAME;
    if (!managerUsername) return;

    try {
      log('INFO', `üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É @${managerUsername}...`);
      const managerEntity = await this.client.getEntity(managerUsername);
      await this.client.sendMessage(managerEntity, {
        message: `üîî **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞!**\n\nüë§ **–ö–ª–∏–µ–Ω—Ç:** ${customer.firstName || customer.username || customer.telegramId}\nüìù **–ó–∞–ø—Ä–æ—Å:** ${message}\n\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`
      });
      log('INFO', '‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω');
    } catch (error) {
      log('ERROR', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É:', error);
    }
  }

  private async notifyManagerWithDetails(customer: any, managerInfo: any) {
    const managerUsername = process.env.MANAGER_USERNAME;
    if (!managerUsername) return;

    try {
      log('INFO', `üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–¥—Ä–æ–±–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É @${managerUsername}...`);
      const managerEntity = await this.client.getEntity(managerUsername);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      let messageText = `üîî **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞!**\n\n`;
      messageText += `üë§ **–ö–ª–∏–µ–Ω—Ç:** ${customer.firstName || '–ë–µ–∑ –∏–º–µ–Ω–∏'}`;

      if (customer.username) {
        messageText += ` (@${customer.username})`;
      }

      messageText += `\nüìû **Telegram ID:** ${customer.telegramId}`;

      if (customer.phoneNumber) {
        messageText += `\n‚òéÔ∏è **–¢–µ–ª–µ—Ñ–æ–Ω:** ${customer.phoneNumber}`;
      }

      if (managerInfo.classification) {
        messageText += `\nüìä **–°—Ç–∞—Ç—É—Å:** ${this.getClassificationLabel(managerInfo.classification)}`;
      }

      messageText += `\n\nüìù **–ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞:**\n"${managerInfo.request}"`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
      if (customer.lastInteraction) {
        const lastDate = new Date(customer.lastInteraction);
        messageText += `\n\n‚è∞ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:** ${lastDate.toLocaleString('ru-RU')}`;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ Telegram
      messageText += `\n\nüí¨ **–ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É:** [–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç](tg://user?id=${customer.telegramId})`;
      messageText += `\n\nüìÖ **–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:** ${new Date().toLocaleString('ru-RU')}`;

      await this.client.sendMessage(managerEntity, {
        message: messageText,
        parseMode: 'markdown'
      });

      log('INFO', '‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏–ª –ø–æ–¥—Ä–æ–±–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    } catch (error) {
      log('ERROR', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É:', error);
    }
  }

  private startStatsReporting() {
    // –ö–∞–∂–¥—ã–π —á–∞—Å –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    setInterval(async () => {
      await this.logStats();
    }, 60 * 60 * 1000); // –∫–∞–∂–¥—ã–π —á–∞—Å
  }

  private async logStats() {
    const totalCustomers = await prisma.customer.count();
    const activeConversations = await prisma.conversation.count({
      where: { status: 'active' }
    });
    const pendingRequests = await prisma.managerRequest.count({
      where: { resolved: false }
    });

    const uptime = Math.floor((Date.now() - this.sessionStartTime.getTime()) / 1000 / 60); // –≤ –º–∏–Ω—É—Ç–∞—Ö

    log('INFO', 'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    log('INFO', `–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime} –º–∏–Ω—É—Ç`);
    log('INFO', `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${this.messagesProcessed}`);
    log('INFO', `–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${totalCustomers}`);
    log('INFO', `–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: ${activeConversations}`);
    log('INFO', `–ó–∞–ø—Ä–æ—Å–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä—É: ${pendingRequests}`);
  }

  async showStats() {
    await this.logStats();
  }

  async stop() {
    this.isRunning = false;
    log('INFO', '‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AI –ü—Ä–æ–¥–∞–∂–Ω–∏–∫–∞...');
    await this.logStats();
    await this.client.disconnect();
    await prisma.$disconnect();
    log('INFO', 'üëã AI –ü—Ä–æ–¥–∞–∂–Ω–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
    logFile.end();
    errorFile.end();
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function main() {
  const isHeadless = process.env.HEADLESS === 'true';

  if (!isHeadless) {
    console.clear();
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('     SOINTERA AI –ü–†–û–î–ê–ñ–ù–ò–ö v1.0');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('     –®–∫–æ–ª–∞ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
  }

  const userbot = new TelegramUserbot();

  try {
    await userbot.start();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await userbot.showStats();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    process.on('SIGINT', async () => {
      log('INFO', '–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (SIGINT)...');
      await userbot.stop();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      log('INFO', '–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (SIGTERM)...');
      await userbot.stop();
      process.exit(0);
    });

    // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º
    await new Promise(() => {}); // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

  } catch (error) {
    log('ERROR', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    await userbot.stop();
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
main().catch((error) => {
  log('ERROR', '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
  process.exit(1);
});
